<Window x:Class="HIDUtilities.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:HIDUtilities.ViewModels"
        xmlns:pro="clr-namespace:HIDUtilities.Properties"
        Title="MainWindow" Height="350" Width="525">

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <Window.Resources>
        <vm:MainWindowViewModel x:Key="viewModel" />

        <ContextMenu x:Key="contextmenu">
            <MenuItem Header="設定">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <l:LivetCallMethodAction MethodTarget="{Binding Source={StaticResource viewModel}}" MethodName="ShowWindow" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </MenuItem>
            <Separator />
            <MenuItem Header="終了">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <l:LivetCallMethodAction MethodTarget="{Binding Source={StaticResource viewModel}}" MethodName="Exit" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </MenuItem>
        </ContextMenu>
    </Window.Resources>

    <i:Interaction.Behaviors>
        <l:WindowCloseCancelBehavior CanClose="{Binding CanClose}"
                                     CloseCanceledCallbackMethodTarget="{Binding}"
                                     CloseCanceledCallbackMethodName="CloseCanceledCallback"/>
    </i:Interaction.Behaviors>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>

        <GroupBox Header="特定のキーによる操作" Grid.Column="0">
            <DataGrid>
                
            </DataGrid>
        </GroupBox>

        <StackPanel Orientation="Vertical" Grid.Column="1" Margin="5,5,5,5">
            <GroupBox Header="キーの表示">
                <StackPanel Orientation="Vertical">
                    <Label Content="入力されたキーの種類を表示" />
                    <TextBox Text="{Binding KeyName, UpdateSourceTrigger=PropertyChanged}" Width="200" HorizontalAlignment="Left" Margin="5,0,5,0" IsReadOnly="True"/>
                </StackPanel>
            </GroupBox>
            <GroupBox Header="マウスループ設定">
                <StackPanel Margin="5,5,5,5">
                    <CheckBox Content="上下ループ有効" IsChecked="{Binding UDLoop, Source={x:Static pro:Settings.Default}}" />
                    <CheckBox Content="左右ループ有効" IsChecked="{Binding LRLoop, Source={x:Static pro:Settings.Default}}" Margin="0,5,0,0"/>
                </StackPanel>
            </GroupBox>
        </StackPanel>
    </Grid>
</Window>
